// TODO:
// - less naive search impl.
// - less unsafe (should have none?).
// - unify the kd tables with the ones in `tab.rs` (maybe).
// - parallel arrays of `[OkLab; N]` and the `[u8; N]`, to avoid 3 bytes of
//   padding per entry (improve cache)
// - vendor static tree generator code into repo (xtask?).
// - ideally we wouldn't have the weird tie behavior.

#[repr(usize)]
#[derive(Copy, Clone)]
enum Axis {
    L = 0,
    A = 1,
    B = 2,
}

// Using `OkLab` for this ends up requiring `unsafe` (and making it `repr(C)`)
// in order to access the value at the Axis efficiently. So just use an array
// instead.
type OkLabArr = [f32; 3];

#[inline]
fn next(a: Axis) -> Axis {
    // Sadly, this produces crap code (jump table):
    //     match self { L => A, A => B, B => L }
    let n = a as usize;
    // More efficient (currently) than `(a + 1) % 3`
    let val = if n == 2 { 0 } else { n + 1 };
    debug_assert!(val == 0 || val == 1 || val == 2);
    // Safety:
    // - if `a` was `L`, then `n` is 0, `val` will 1 (from `n + 1`), which
    //   will transmute to `Axis::A`.
    // - if `a` was `A`, then `n` is 1, `val` will 2 (from `n + 1`), which
    //   will transmute to `Axis::B`.
    // - if `a` was `B`, then `n` is 2, `val` will 0 (from `0`), which
    //   will transmute to `Axis::L`.
    unsafe { core::mem::transmute(val) }
}

#[inline]
fn sqr(f: f32) -> f32 {
    f * f
}

#[inline]
fn euc_dist_sq(c0: &OkLabArr, c1: &OkLabArr) -> f32 {
    sqr(c0[0] - c1[0]) + sqr(c0[1] - c1[1]) + sqr(c0[2] - c1[2])
}

fn kdsearch<const N: usize>(kdtree: &[(u8, OkLabArr); N], query: OkLabArr) -> (u8, OkLabArr) {
    assert_ne!(N, 0);
    let mut nearest = (euc_dist_sq(&kdtree[0].1, &query), kdtree[0]);
    kdsearch_inner(&mut nearest, kdtree, &query, Axis::L);
    nearest.1
}

fn kdsearch_inner(
    best: &mut (f32, (u8, OkLabArr)),
    kdtree: &[(u8, OkLabArr)],
    query: &OkLabArr,
    axis: Axis,
) {
    if kdtree.is_empty() {
        return;
    }
    let h = kdtree.len() / 2;
    let item = kdtree[h];
    let d = euc_dist_sq(&item.1, query);
    if d < best.0 {
        *best = (d, item);
    }
    let split = item.1[axis as usize];
    let (branch1, branch2) = if query[axis as usize] > split {
        (
            kdtree.get(h + 1..).unwrap_or_default(),
            kdtree.get(..h).unwrap_or_default(),
        )
    } else {
        (
            kdtree.get(..h).unwrap_or_default(),
            kdtree.get(h + 1..).unwrap_or_default(),
        )
    };
    let next_axis = next(axis);
    kdsearch_inner(best, branch1, query, next_axis);
    if sqr(query[axis as usize] - split) < best.0 {
        kdsearch_inner(best, branch2, query, next_axis);
    }
}

pub(crate) fn nearest_ansi256(l: super::oklab::OkLab) -> u8 {
    let r = kdsearch(&STATIC_KD256, [l.l, l.a, l.b]);
    debug_assert!(r.0 >= 16, "{:?}", r);
    debug_assert_eq!(
        super::tab::LAB_PALETTE_ANSI256[r.0 as usize - 16],
        super::oklab::oklab(r.1[0], r.1[1], r.1[2]),
        "{r:?}",
    );
    r.0
}

#[cfg(feature = "88color")]
pub(crate) fn nearest_ansi88(l: super::oklab::OkLab) -> u8 {
    let r = kdsearch(&STATIC_KD88, [l.l, l.a, l.b]);
    debug_assert!(r.0 >= 16 && r.0 < 88, "{:?}", r);
    debug_assert_eq!(
        super::tab::LAB_PALETTE_ANSI88[r.0 as usize - 16],
        super::oklab::oklab(r.1[0], r.1[1], r.1[2]),
        "{r:?}",
    );
    r.0
}

const STATIC_KD256: [(u8, OkLabArr); 240] = [
    (16 + 3, [0.34082618, -0.0244731, -0.23489758]),
    (16 + 4, [0.3973963, -0.028535187, -0.2738858]),
    (16 + 5, [0.4520137, -0.032456964, -0.31152815]),
    (16 + 10, [0.5158243, -0.038223833, -0.19581121]),
    (16 + 7, [0.4395688, -0.07255453, -0.019127697]),
    (16 + 8, [0.45908442, -0.05526048, -0.08179703]),
    (16 + 9, [0.4849069, -0.04412508, -0.14114544]),
    (16 + 2, [0.28178954, -0.020233974, -0.19420952]),
    (16 + 1, [0.21945143, -0.01575777, -0.15124606]),
    (16 + 223, [0.4239265, -2.9802322e-8, 0.0]),
    (16 + 44, [0.50186557, 0.015191138, -0.06144744]),
    (16 + 221, [0.34845966, -2.9802322e-8, 0.0]),
    (16 + 0, [0.0, 0.0, 0.0]),
    (16 + 219, [0.26861826, 4.4703484e-8, 0.0]),
    (16 + 222, [0.38665435, 0.0, 0.0]),
    (16 + 45, [0.5239784, 0.024147123, -0.12134954]),
    (16 + 16, [0.6039327, -0.06338224, -0.14104792]),
    (16 + 17, [0.6299223, -0.05471745, -0.19538587]),
    (16 + 22, [0.69887954, -0.09604159, -0.08616805]),
    (16 + 15, [0.58191586, -0.07614604, -0.08368099]),
    (16 + 14, [0.5644343, -0.09316474, -0.024561167]),
    (16 + 21, [0.68268675, -0.112683296, -0.029706955]),
    (16 + 57, [0.7034066, -0.075856745, -0.02105254]),
    (16 + 50, [0.5939752, -0.042566955, -0.012224644]),
    (16 + 11, [0.5505866, -0.036017746, -0.24609107]),
    (16 + 52, [0.63017714, -0.015574932, -0.12817168]),
    (16 + 53, [0.6542841, -0.008513957, -0.1830216]),
    (16 + 51, [0.60992646, -0.026922941, -0.070721805]),
    (16 + 87, [0.63802856, 0.015011221, -0.057689905]),
    (16 + 230, [0.6665481, 8.940697e-8, -5.9604645e-8]),
    (16 + 218, [0.22644986, 2.2351742e-8, 0.0]),
    (16 + 224, [0.46039563, -8.940697e-8, 2.9802322e-8]),
    (16 + 225, [0.49615562, -2.9802322e-8, 2.9802322e-8]),
    (16 + 13, [0.55183345, -0.11317666, 0.03273973]),
    (16 + 6, [0.42065406, -0.11355172, 0.087146014]),
    (16 + 42, [0.46995294, -0.03464946, 0.09640509]),
    (16 + 12, [0.54014647, -0.14580768, 0.111901045]),
    (16 + 48, [0.5720238, -0.090493426, 0.11784816]),
    (16 + 227, [0.56583637, -2.9802322e-8, 2.9802322e-8]),
    (16 + 216, [0.13440923, 3.7252903e-9, 7.450581e-9]),
    (16 + 217, [0.18220371, -7.450581e-9, 0.0]),
    (16 + 220, [0.30918562, 1.4901161e-8, 2.9802322e-8]),
    (16 + 43, [0.48549724, 1.4901161e-8, 2.9802322e-8]),
    (16 + 78, [0.51425487, 0.018674493, 0.104892075]),
    (16 + 226, [0.5312818, 8.940697e-8, 2.9802322e-8]),
    (16 + 49, [0.58255553, -0.061045274, 0.04348156]),
    (16 + 19, [0.6613503, -0.15079442, 0.075170875]),
    (16 + 20, [0.67017204, -0.1316404, 0.025488436]),
    (16 + 56, [0.6915908, -0.09388909, 0.033340693]),
    (16 + 55, [0.683283, -0.11204216, 0.081787765]),
    (16 + 18, [0.6533105, -0.17635529, 0.13534495]),
    (16 + 54, [0.6757256, -0.1359734, 0.13951313]),
    (16 + 90, [0.6988905, -0.09849526, 0.14385992]),
    (16 + 84, [0.6034494, -0.04449226, 0.123790234]),
    (16 + 228, [0.5998708, 2.9802322e-8, 2.9802322e-8]),
    (16 + 229, [0.633429, 0.0, 0.0]),
    (16 + 231, [0.6992607, -5.9604645e-8, 5.9604645e-8]),
    (16 + 86, [0.6234093, 0.0, 5.9604645e-8]),
    (16 + 85, [0.6130028, -0.017503172, 0.053987086]),
    (16 + 120, [0.64375144, 0.005603671, 0.13149554]),
    (16 + 88, [0.6567161, 0.025852472, -0.11504513]),
    (16 + 40, [0.45331943, 0.08530313, -0.24302793]),
    (16 + 41, [0.49744356, 0.066738576, -0.2867549]),
    (16 + 47, [0.5820608, 0.026062697, -0.2294375]),
    (16 + 39, [0.4112718, 0.104753375, -0.19547123]),
    (16 + 38, [0.3728961, 0.12249705, -0.14249241]),
    (16 + 46, [0.55102885, 0.027281255, -0.177434]),
    (16 + 81, [0.5608929, 0.07386151, -0.102464914]),
    (16 + 77, [0.53832316, 0.12967274, -0.26336262]),
    (16 + 75, [0.46677762, 0.16226044, -0.16319314]),
    (16 + 76, [0.5008869, 0.1473515, -0.21550325]),
    (16 + 112, [0.5565127, 0.19929409, -0.18318456]),
    (16 + 111, [0.5290742, 0.20702776, -0.12754661]),
    (16 + 37, [0.34066075, 0.13330114, -0.08212477]),
    (16 + 74, [0.43742996, 0.17116722, -0.10545346]),
    (16 + 82, [0.5849188, 0.0771327, -0.159426]),
    (16 + 83, [0.61291206, 0.0755021, -0.21275038]),
    (16 + 119, [0.6524067, 0.12718725, -0.19118196]),
    (16 + 89, [0.67912704, 0.03232506, -0.17026287]),
    (16 + 118, [0.6276702, 0.1276092, -0.136657]),
    (16 + 117, [0.6067754, 0.12283531, -0.07919431]),
    (16 + 154, [0.6769157, 0.17418364, -0.110719025]),
    (16 + 124, [0.6915419, 0.072224885, -0.09781289]),
    (16 + 155, [0.69852346, 0.17599791, -0.16603184]),
    (16 + 113, [0.5877834, 0.18646017, -0.23460689]),
    (16 + 149, [0.6429402, 0.23445228, -0.20262575]),
    (16 + 185, [0.7016738, 0.27456632, -0.16915613]),
    (16 + 148, [0.6168897, 0.24138993, -0.14871672]),
    (16 + 147, [0.59468347, 0.24246895, -0.09144944]),
    (16 + 184, [0.67986554, 0.27608937, -0.11391932]),
    (16 + 110, [0.50647354, 0.20740664, -0.06772506]),
    (16 + 79, [0.5274639, 0.0496756, 0.01707694]),
    (16 + 80, [0.5415629, 0.06461343, -0.042637587]),
    (16 + 116, [0.59022695, 0.112386584, -0.020126611]),
    (16 + 115, [0.5783239, 0.097317025, 0.036917865]),
    (16 + 36, [0.3048706, 0.1091704, 0.061098024]),
    (16 + 114, [0.5673052, 0.06971961, 0.115181595]),
    (16 + 150, [0.6257253, 0.11587842, 0.12661526]),
    (16 + 72, [0.39147317, 0.14018172, 0.078453705]),
    (16 + 73, [0.4145116, 0.1703483, -0.042265296]),
    (16 + 109, [0.48961607, 0.19914411, -0.0056277215]),
    (16 + 146, [0.57693666, 0.23668107, -0.0318335]),
    (16 + 145, [0.5640697, 0.22454189, 0.026858658]),
    (16 + 108, [0.47348917, 0.16955064, 0.09489027]),
    (16 + 144, [0.5520787, 0.19769266, 0.11064011]),
    (16 + 180, [0.6279554, 0.22486295, 0.1258463]),
    (16 + 152, [0.64487666, 0.15544844, 0.0041345954]),
    (16 + 122, [0.6615167, 0.04664123, 0.015582085]),
    (16 + 123, [0.6746394, 0.061347187, -0.040827215]),
    (16 + 151, [0.6348868, 0.14033543, 0.057751685]),
    (16 + 121, [0.6522333, 0.030020624, 0.06721881]),
    (16 + 156, [0.6907873, 0.05503133, 0.14057681]),
    (16 + 157, [0.6982251, 0.07696596, 0.08222404]),
    (16 + 186, [0.68721557, 0.15724804, 0.1387254]),
    (16 + 182, [0.6474213, 0.2622939, 0.0013148785]),
    (16 + 153, [0.65892786, 0.1672869, -0.053379238]),
    (16 + 183, [0.6616679, 0.27199948, -0.05650395]),
    (16 + 188, [0.7032815, 0.19371217, 0.028722703]),
    (16 + 181, [0.637274, 0.2485399, 0.05552101]),
    (16 + 187, [0.6948738, 0.17885262, 0.078464955]),
    (16 + 91, [0.70599484, -0.07601568, 0.08859268]),
    (16 + 28, [0.7959987, -0.13138643, -0.03463763]),
    (16 + 29, [0.8112802, -0.11511955, -0.08900452]),
    (16 + 64, [0.81143993, -0.10341141, -0.028189182]),
    (16 + 27, [0.78364235, -0.14951989, 0.018766284]),
    (16 + 26, [0.77423394, -0.16822812, 0.06857163]),
    (16 + 62, [0.79047513, -0.13902286, 0.07386321]),
    (16 + 63, [0.79953027, -0.12094754, 0.024752855]),
    (16 + 99, [0.81643677, -0.09264496, 0.03111136]),
    (16 + 23, [0.7185603, -0.082555294, -0.14163136]),
    (16 + 59, [0.7374562, -0.047498286, -0.13257247]),
    (16 + 65, [0.8261948, -0.08772239, -0.08231586]),
    (16 + 58, [0.7187448, -0.060090452, -0.077144146]),
    (16 + 92, [0.71381783, -0.058706045, 0.041449428]),
    (16 + 100, [0.8278984, -0.07562256, -0.021313667]),
    (16 + 135, [0.8397276, -0.05673048, 0.039831877]),
    (16 + 34, [0.8932213, -0.16691509, 0.012483656]),
    (16 + 35, [0.90539926, -0.1494439, -0.039398134]),
    (16 + 71, [0.9174228, -0.12742159, -0.034377933]),
    (16 + 70, [0.90554816, -0.1444853, 0.017212093]),
    (16 + 33, [0.88347876, -0.1850791, 0.06181562]),
    (16 + 69, [0.8960568, -0.16222385, 0.06611782]),
    (16 + 105, [0.9096284, -0.13877949, 0.07075125]),
    (16 + 106, [0.91886026, -0.121448606, 0.022314906]),
    (16 + 101, [0.842123, -0.06040287, -0.075155735]),
    (16 + 107, [0.93042046, -0.10476264, -0.028947413]),
    (16 + 143, [0.94863683, -0.07482481, -0.021340072]),
    (16 + 142, [0.93749535, -0.09106943, 0.029443502]),
    (16 + 141, [0.9286084, -0.10790333, 0.077209115]),
    (16 + 178, [0.9613051, -0.05506113, 0.038511813]),
    (16 + 98, [0.80773467, -0.11014545, 0.07946664]),
    (16 + 25, [0.76767623, -0.18535519, 0.11082989]),
    (16 + 61, [0.78417027, -0.15551075, 0.11526781]),
    (16 + 32, [0.876124, -0.20255691, 0.10602385]),
    (16 + 31, [0.8710288, -0.21750051, 0.14186257]),
    (16 + 24, [0.76174664, -0.20562676, 0.15780947]),
    (16 + 60, [0.7784736, -0.17489707, 0.16091448]),
    (16 + 30, [0.8664396, -0.2338874, 0.1794985]),
    (16 + 96, [0.7962169, -0.14456579, 0.16422889]),
    (16 + 97, [0.801682, -0.12603042, 0.11996454]),
    (16 + 133, [0.8257473, -0.08871445, 0.12638414]),
    (16 + 134, [0.83147794, -0.07356131, 0.08712679]),
    (16 + 126, [0.72987574, -0.053813457, 0.14972496]),
    (16 + 132, [0.8205774, -0.10619977, 0.16880968]),
    (16 + 168, [0.85102016, -0.06274551, 0.17457634]),
    (16 + 66, [0.87947434, -0.20967159, 0.1819157]),
    (16 + 67, [0.88393855, -0.19379553, 0.14505136]),
    (16 + 68, [0.8888966, -0.17926407, 0.109787226]),
    (16 + 104, [0.9026691, -0.15539065, 0.11383593]),
    (16 + 103, [0.8978524, -0.16951057, 0.14848405]),
    (16 + 102, [0.8935169, -0.18487233, 0.18453145]),
    (16 + 138, [0.9131206, -0.15226507, 0.18820173]),
    (16 + 139, [0.91728586, -0.13756642, 0.15326786]),
    (16 + 140, [0.9219153, -0.12397346, 0.119472444]),
    (16 + 175, [0.9420488, -0.09980062, 0.15934044]),
    (16 + 176, [0.94645524, -0.08681399, 0.12661463]),
    (16 + 177, [0.9528308, -0.07135442, 0.0854013]),
    (16 + 211, [0.97172195, -0.058264583, 0.16657531]),
    (16 + 174, [0.9380859, -0.113731384, 0.19290358]),
    (16 + 210, [0.9679827, -0.07136908, 0.19856972]),
    (16 + 169, [0.85585356, -0.046420157, 0.13434619]),
    (16 + 125, [0.71198195, 0.07878995, -0.15329331]),
    (16 + 94, [0.7394914, -0.026206434, -0.067693174]),
    (16 + 95, [0.75726813, -0.014172643, -0.12302011]),
    (16 + 130, [0.76753694, 0.014700472, -0.054931283]),
    (16 + 93, [0.72497016, -0.041380167, -0.012053847]),
    (16 + 232, [0.731595, -5.9604645e-8, 0.0]),
    (16 + 129, [0.7540173, 2.9802322e-8, 0.0]),
    (16 + 159, [0.7180268, 0.107402384, -0.021185815]),
    (16 + 190, [0.730664, 0.21563461, -0.08306438]),
    (16 + 191, [0.74945384, 0.21999735, -0.13860208]),
    (16 + 161, [0.7515105, 0.1260531, -0.13290465]),
    (16 + 160, [0.7331132, 0.118757874, -0.07741469]),
    (16 + 189, [0.71521485, 0.20665306, -0.02653575]),
    (16 + 196, [0.77988285, 0.16282454, -0.05487293]),
    (16 + 131, [0.78415823, 0.026378334, -0.110021114]),
    (16 + 136, [0.85061306, -0.040264696, -0.01184237]),
    (16 + 137, [0.8641523, -0.025509566, -0.06524694]),
    (16 + 179, [0.9719444, -0.039266795, -0.011629283]),
    (16 + 237, [0.88836974, 0.0, 0.0]),
    (16 + 235, [0.8265622, 8.940697e-8, 0.0]),
    (16 + 236, [0.8576052, 8.940697e-8, 0.0]),
    (16 + 238, [0.9188701, -2.9802322e-8, 5.9604645e-8]),
    (16 + 173, [0.8919143, 0.014378905, -0.05278641]),
    (16 + 197, [0.7963107, 0.17121884, -0.11002153]),
    (16 + 167, [0.8173637, 0.07041523, -0.09399748]),
    (16 + 203, [0.8559195, 0.11496708, -0.07553446]),
    (16 + 166, [0.80201817, 0.05880031, -0.039344966]),
    (16 + 202, [0.8418806, 0.10316554, -0.02156657]),
    (16 + 209, [0.92480606, 0.056749493, -0.038115144]),
    (16 + 172, [0.87916875, 5.9604645e-8, 5.9604645e-8]),
    (16 + 128, [0.74367183, -0.016630739, 0.052231967]),
    (16 + 233, [0.76357573, -2.9802322e-8, 5.9604645e-8]),
    (16 + 234, [0.7952249, 2.9802322e-8, 5.9604645e-8]),
    (16 + 164, [0.7801225, 0.028380692, 0.06517321]),
    (16 + 127, [0.7364349, -0.033008248, 0.09760895]),
    (16 + 162, [0.7675407, -0.006118208, 0.15691769]),
    (16 + 163, [0.7735164, 0.012948602, 0.10840064]),
    (16 + 198, [0.81059945, 0.041587323, 0.16520673]),
    (16 + 158, [0.7064011, 0.09277284, 0.03344363]),
    (16 + 195, [0.76651573, 0.15080526, 0.00016850233]),
    (16 + 165, [0.78959334, 0.044388056, 0.014583707]),
    (16 + 194, [0.75628394, 0.13620797, 0.052571774]),
    (16 + 192, [0.74263614, 0.10158342, 0.15066692]),
    (16 + 193, [0.74912506, 0.1212146, 0.09817162]),
    (16 + 199, [0.81599617, 0.058954954, 0.12048274]),
    (16 + 171, [0.86894715, -0.015935779, 0.050677896]),
    (16 + 213, [0.98190516, -0.03111574, 0.095143616]),
    (16 + 214, [0.98992103, -0.015371084, 0.049328506]),
    (16 + 170, [0.86121625, -0.0320659, 0.09662074]),
    (16 + 204, [0.886771, -0.016925097, 0.18139815]),
    (16 + 205, [0.8912491, -0.001794666, 0.14359498]),
    (16 + 212, [0.9758818, -0.04592961, 0.13510126]),
    (16 + 239, [0.94911927, -5.9604645e-8, 5.9604645e-8]),
    (16 + 201, [0.8305656, 0.08889663, 0.03105414]),
    (16 + 208, [0.9129136, 0.042629868, 0.013854206]),
    (16 + 215, [1.0, 0.0, 5.9604645e-8]),
    (16 + 207, [0.9034013, 0.027169466, 0.06329459]),
    (16 + 200, [0.82197315, 0.07345533, 0.07967597]),
    (16 + 206, [0.8962219, 0.011737704, 0.107628465]),
];

#[cfg(feature = "88color")]
const STATIC_KD88: [(u8, OkLabArr); 72] = [
    (16 + 3, [0.4520137, -0.032456964, -0.31152815]),
    (16 + 2, [0.3834533, -0.027533978, -0.26427627]),
    (16 + 1, [0.2878243, -0.0206673, -0.19836867]),
    (16 + 65, [0.4747801, -4.4703484e-8, 0.0]),
    (16 + 66, [0.55552685, 1.7881393e-7, -2.9802322e-8]),
    (16 + 6, [0.6075066, -0.06933743, -0.1213634]),
    (16 + 5, [0.5765221, -0.09515983, -0.025087237]),
    (16 + 7, [0.63848037, -0.05717066, -0.19005519]),
    (16 + 22, [0.6627997, 0.022596955, -0.09467232]),
    (16 + 64, [0.30118382, -1.4901161e-8, 0.0]),
    (16 + 4, [0.5517141, -0.14893016, 0.11429742]),
    (16 + 20, [0.61637276, -0.045444936, 0.12644124]),
    (16 + 0, [0.0, 0.0, 0.0]),
    (16 + 21, [0.63676006, 0.0, 0.0]),
    (16 + 67, [0.63676006, 0.0, 0.0]),
    (16 + 8, [0.73502004, -0.19841206, 0.15227255]),
    (16 + 9, [0.7492824, -0.15741602, 0.053507447]),
    (16 + 68, [0.71223843, 2.9802322e-8, 5.9604645e-8]),
    (16 + 23, [0.6893908, 0.032160163, -0.16419017]),
    (16 + 19, [0.5429364, 0.13571924, -0.26069143]),
    (16 + 18, [0.49743858, 0.15699005, -0.19971588]),
    (16 + 17, [0.4467979, 0.17483282, -0.10771179]),
    (16 + 34, [0.59524554, 0.23292077, -0.14349887]),
    (16 + 35, [0.6287456, 0.22325638, -0.21081972]),
    (16 + 39, [0.7473251, 0.10897267, -0.13445961]),
    (16 + 51, [0.7016738, 0.27456632, -0.16915613]),
    (16 + 50, [0.674962, 0.2756116, -0.099726796]),
    (16 + 38, [0.7246323, 0.098840415, -0.06490016]),
    (16 + 16, [0.39985693, 0.14318381, 0.0801339]),
    (16 + 32, [0.5327085, 0.19075644, 0.10675821]),
    (16 + 48, [0.6279554, 0.22486295, 0.1258463]),
    (16 + 33, [0.5609408, 0.23058328, -0.04661995]),
    (16 + 49, [0.648662, 0.26348913, -0.0043944716]),
    (16 + 36, [0.68600726, 0.036635593, 0.13979837]),
    (16 + 37, [0.7028026, 0.076487005, 0.02678001]),
    (16 + 52, [0.74894756, 0.09565355, 0.15202156]),
    (16 + 53, [0.7632234, 0.13156626, 0.050208032]),
    (16 + 10, [0.7680703, -0.12677658, -0.03342235]),
    (16 + 14, [0.89055794, -0.1714358, 0.025142074]),
    (16 + 11, [0.7878944, -0.10672426, -0.10192394]),
    (16 + 26, [0.80428064, -0.06422183, -0.018299103]),
    (16 + 15, [0.90539926, -0.1494439, -0.039398134]),
    (16 + 30, [0.9179676, -0.123022854, 0.03538412]),
    (16 + 31, [0.9320073, -0.10207316, -0.02828455]),
    (16 + 46, [0.9525355, -0.068587154, 0.04823762]),
    (16 + 25, [0.78709555, -0.092683345, 0.066360354]),
    (16 + 13, [0.87675506, -0.20089024, 0.10192311]),
    (16 + 12, [0.8664396, -0.2338874, 0.1794985]),
    (16 + 28, [0.895228, -0.18193612, 0.18485105]),
    (16 + 24, [0.7741168, -0.12998083, 0.15956119]),
    (16 + 29, [0.9049427, -0.15098754, 0.11035454]),
    (16 + 44, [0.9313626, -0.12380466, 0.19163442]),
    (16 + 45, [0.9403969, -0.09505212, 0.12088007]),
    (16 + 60, [0.9679827, -0.07136908, 0.19856972]),
    (16 + 40, [0.8211613, -0.060544074, 0.16845119]),
    (16 + 27, [0.8225205, -0.04565239, -0.08609772]),
    (16 + 42, [0.8483223, 2.9802322e-8, 0.0]),
    (16 + 54, [0.7819947, 0.15428028, -0.037909627]),
    (16 + 55, [0.80175614, 0.1658248, -0.106785715]),
    (16 + 70, [0.8576052, 8.940697e-8, 0.0]),
    (16 + 47, [0.9656562, -0.048578918, -0.014245689]),
    (16 + 43, [0.86488146, 0.017706782, -0.06670517]),
    (16 + 59, [0.9068899, 0.07126486, -0.04760754]),
    (16 + 71, [0.92797065, -5.9604645e-8, 5.9604645e-8]),
    (16 + 41, [0.8328142, -0.026747257, 0.08169073]),
    (16 + 56, [0.86715233, -0.00262177, 0.17723686]),
    (16 + 69, [0.78576374, 5.9604645e-8, 5.9604645e-8]),
    (16 + 57, [0.8776923, 0.028367609, 0.0964185]),
    (16 + 58, [0.8917762, 0.05391258, 0.017800272]),
    (16 + 61, [0.9763977, -0.04453373, 0.13144428]),
    (16 + 62, [0.98772544, -0.01931709, 0.06119448]),
    (16 + 63, [1.0, 0.0, 5.9604645e-8]),
];

#[cfg(test)]
mod test {
    use super::super::oklab::OkLab;

    #[test]
    #[ignore] // test with cargo test --release --ignored
    fn test_exhaustive() {
        fn dist(a: OkLab, b: OkLab) -> f32 {
            (a.l - b.l).powi(2) + (a.a - b.a).powi(2) + (a.b - b.b).powi(2) //.sqrt()
        }
        let mut ties256 = 0;
        #[cfg(feature = "88color")]
        let mut ties88 = 0;
        for r in 0..=255 {
            for g in 0..=255 {
                for b in 0..=255 {
                    let lab = OkLab::from_srgb8(r, g, b);
                    {
                        let fallback256 = crate::imp::fallback::nearest_ansi256(lab);
                        let kd256 = super::nearest_ansi256(lab);
                        assert!(fallback256 >= 16);
                        assert!(kd256 >= 16);
                        let fallback256lab =
                            super::super::tab::LAB_PALETTE_ANSI256[fallback256 as usize - 16];
                        let kd256lab = super::super::tab::LAB_PALETTE_ANSI256[kd256 as usize - 16];
                        let distkd = dist(lab, kd256lab);
                        let distfb = dist(lab, fallback256lab);
                        if kd256 != fallback256 {
                            if distkd == distfb {
                                // TIE(0): for (1, 1, 1), we get 232 (`(8, 8, 8)`),
                                // tied with 16 (`(0, 0, 0)`)
                                std::eprintln!(
                                    "TIE256({}): for {:?}, we get {} (`{:?}`), tied with {} (`{:?}`)",
                                    ties256,
                                    (r, g, b),
                                    kd256,
                                    super::super::tab::ANSI256_RGB[kd256 as usize - 16],
                                    fallback256,
                                    super::super::tab::ANSI256_RGB[fallback256 as usize - 16],
                                );
                                // greyscale won't even call this function, so it
                                // doesn't matter that `(1, 1, 1)` has a tie between
                                // 16 (e.g. `(0, 0, 0)`) and 232 (e.g. `(8, 8, 8)`),
                                // which are a genuinely equidistant (to f32
                                // precision) in OkLab space. It's also not *really*
                                // wrong, just odd.
                                assert!(r == g && g == b);
                                ties256 += 1;
                            } else {
                                assert_eq!(
                                    kd256,
                                    fallback256,
                                    "256color{:?} (e.g. {:?}) gave {:?} (dist = {:?}), want {:?} (dist = {:?})",
                                    (r, g, b),
                                    lab,
                                    kd256lab,
                                    distkd,
                                    fallback256lab,
                                    distfb,
                                );
                            }
                        }
                    }
                    #[cfg(feature = "88color")]
                    // #[cfg(any())]
                    {
                        let fallback88 = crate::imp::fallback::nearest_ansi88(lab);
                        let kd88 = super::nearest_ansi88(lab);
                        assert!(fallback88 >= 16 && fallback88 < 88);
                        assert!(kd88 >= 16 && kd88 < 88);
                        let fallback88lab =
                            super::super::tab::LAB_PALETTE_ANSI88[fallback88 as usize - 16];
                        let kd88lab = super::super::tab::LAB_PALETTE_ANSI88[kd88 as usize - 16];
                        let distkd = dist(lab, kd88lab);
                        let distfb = dist(lab, fallback88lab);
                        let kdrgb = super::super::tab::ANSI88_RGB[kd88 as usize - 16];
                        let fbrgb = super::super::tab::ANSI88_RGB[fallback88 as usize - 16];
                        if fallback88 != kd88 && kdrgb != fbrgb {
                            if distkd == distfb {
                                // TIE(0): for (1, 1, 1), we get 232 (`(8, 8, 8)`),
                                // tied with 16 (`(0, 0, 0)`)
                                std::eprintln!(
                                    "TIE88({}): for {:?}, we get {} (`{:?}`), tied with {} (`{:?}`)",
                                    ties88,
                                    (r, g, b),
                                    kd88,
                                    super::super::tab::ANSI88_RGB[kd88 as usize - 16],
                                    fallback88,
                                    super::super::tab::ANSI88_RGB[fallback88 as usize - 16],
                                );
                                ties88 += 1;
                            } else {
                                assert_eq!(
                                    kd88,
                                    fallback88,
                                    "88color{:?} (e.g. {:?}) gave {:?} (dist = {:?}), want {:?} (dist = {:?})",
                                    (r, g, b),
                                    lab,
                                    kd88lab,
                                    distkd,
                                    fallback88lab,
                                    distfb,
                                );
                            }
                        }
                    }
                }
            }
            std::eprintln!("{}/255", r);
        }
        std::eprintln!("ties (kd, 256): {ties256}");
        #[cfg(feature = "88color")]
        std::eprintln!("ties (kd, 88): {ties88}");
    }
}
